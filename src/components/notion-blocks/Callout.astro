---
import * as interfaces from "../../lib/interfaces.ts";
import {
	getNotionColorToTailwindColor,
	getIconTailwindFilterStyle,
} from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	headings: interfaces.Block[];
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, headings, renderChildren = true, setId = true } = Astro.props;
---

<div
	className={`
    callout mx-auto my-2 flex w-full max-w-full rounded px-3 py-4 leading-6
    ${getNotionColorToTailwindColor(block.Callout.Color, true)}
  `}
	id={setId ? block.Id : undefined}
>
	<div class="m-0 mr-2 leading-6">
		{
			block.Callout.Icon.Type === "emoji" ? (
				block.Callout.Icon.Emoji
			) : block.Callout.Icon.Type === "external" ? (
				<img
					src={block.Callout.Icon.Url}
					class={`h-5 w-5 max-w-none ${getIconTailwindFilterStyle(block.Callout.Icon.Url)}`}
					alt=""
				/>
			) : null
		}
	</div>
	<div class="m-0 min-w-0 leading-6">
		{
			block.Callout.RichTexts.map((richText: interfaces.RichText) => (
				<RichText richText={richText} blockID={block.Id} />
			))
		}
		{
			block.Callout.Children && renderChildren && (
				<NotionBlocks
					blocks={block.Callout.Children}
					headings={headings}
					renderChildren={renderChildren}
					setId={setId}
				/>
			)
		}
	</div>
</div>
